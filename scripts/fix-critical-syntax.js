#!/usr/bin/env node

/**
 * Script de r√©paration critique - Correction des erreurs de syntaxe
 * Corrige les erreurs sp√©cifiques identifi√©es dans le build
 */

const fs = require('fs');
const path = require('path');

console.log('üö® R√©paration Critique - Erreurs de Syntaxe');
console.log('============================================\n');

// Fonction pour corriger les erreurs sp√©cifiques
function fixCriticalErrors() {
  console.log('üîß Correction des erreurs critiques...\n');

  // 1. Corriger middleware.ts
  try {
    const middlewarePath = 'middleware.ts';
    if (fs.existsSync(middlewarePath)) {
      let content = fs.readFileSync(middlewarePath, 'utf8');

      // Corriger la syntaxe de la fonction middleware
      content = content.replace(
        /export async function middleware\(\): Promise<void> \(/g,
        'export async function middleware(request: NextRequest): Promise<NextResponse> {',
      );

      fs.writeFileSync(middlewarePath, content, 'utf8');
      console.log('‚úÖ middleware.ts corrig√©');
    }
  } catch (error) {
    console.error('‚ùå Erreur avec middleware.ts:', error.message);
  }

  // 2. Corriger src/app/checkout/success/page.tsx
  try {
    const filePath = 'src/app/checkout/success/page.tsx';
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, 'utf8');

      // Corriger les balises Image mal ferm√©es
      content = content.replace(
        /<Image src=\{item\.image\.src\} alt=\{item\.name\} className="w-full h-full object-cover rounded-lg" \/ \/>/g,
        '<Image src={item.image.src} alt={item.name} className="w-full h-full object-cover rounded-lg" />',
      );

      fs.writeFileSync(filePath, content, 'utf8');
      console.log('‚úÖ checkout/success/page.tsx corrig√©');
    }
  } catch (error) {
    console.error('‚ùå Erreur avec checkout/success/page.tsx:', error.message);
  }

  // 3. Corriger src/app/test-product-details/page.tsx
  try {
    const filePath = 'src/app/test-product-details/page.tsx';
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, 'utf8');

      // Corriger les balises Image mal ferm√©es
      content = content.replace(
        /<Image src=\{product\.images\[0\]\.src\} alt=\{product\.name\} className="w-full h-full object-cover" \/ \/>/g,
        '<Image src={product.images[0].src} alt={product.name} className="w-full h-full object-cover" />',
      );

      fs.writeFileSync(filePath, content, 'utf8');
      console.log('‚úÖ test-product-details/page.tsx corrig√©');
    }
  } catch (error) {
    console.error('‚ùå Erreur avec test-product-details/page.tsx:', error.message);
  }

  // 4. Corriger src/app/test-variations/page.tsx
  try {
    const filePath = 'src/app/test-variations/page.tsx';
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, 'utf8');

      // Corriger les balises Image mal ferm√©es
      content = content.replace(
        /<Image src=\{variation\.image\} alt=\{variation\.name\} className="w-full h-20 object-cover rounded" \/ \/>/g,
        '<Image src={variation.image} alt={variation.name} className="w-full h-20 object-cover rounded" />',
      );

      fs.writeFileSync(filePath, content, 'utf8');
      console.log('‚úÖ test-variations/page.tsx corrig√©');
    }
  } catch (error) {
    console.error('‚ùå Erreur avec test-variations/page.tsx:', error.message);
  }

  console.log('\nüìä Corrections critiques termin√©es\n');
}

// Fonction pour corriger tous les √©l√©ments Image mal ferm√©s
function fixAllImageElements() {
  console.log('üîß Correction de tous les √©l√©ments Image...\n');

  const filesToCheck = [
    'src/app/checkout/success/page.tsx',
    'src/app/test-product-details/page.tsx',
    'src/app/test-variations/page.tsx',
  ];

  let fixedCount = 0;

  for (const filePath of filesToCheck) {
    try {
      if (!fs.existsSync(filePath)) {
        console.log(`‚ö†Ô∏è  Fichier non trouv√©: ${filePath}`);
        continue;
      }

      let content = fs.readFileSync(filePath, 'utf8');
      const originalContent = content;

      // Corriger tous les √©l√©ments Image mal ferm√©s
      content = content.replace(/ \/ \/>/g, ' />');
      content = content.replace(/\/ \/>/g, '/>');

      if (content !== originalContent) {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ √âl√©ments Image corrig√©s: ${filePath}`);
        fixedCount++;
      }
    } catch (error) {
      console.error(`‚ùå Erreur avec ${filePath}:`, error.message);
    }
  }

  console.log(`\nüìä ${fixedCount} fichiers avec √©l√©ments Image corrig√©s\n`);
  return fixedCount;
}

// Fonction principale
function main() {
  console.log('üöÄ D√©marrage de la r√©paration critique...\n');

  // 1. Corriger les erreurs sp√©cifiques
  fixCriticalErrors();

  // 2. Corriger tous les √©l√©ments Image
  fixAllImageElements();

  console.log('üéâ R√©paration critique termin√©e !');

  console.log('\nüìã Prochaines √©tapes:');
  console.log('1. Tester: npm run build');
  console.log('2. V√©rifier que le build fonctionne');
  console.log('3. Relancer: npm run lint');
}

// Ex√©cuter le script
main();
