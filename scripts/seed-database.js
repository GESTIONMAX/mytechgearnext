const { createClient } = require('@supabase/supabase-js');
const path = require('path');
const fs = require('fs');

// Charger les variables d'environnement depuis .env.local
const envPath = path.join(__dirname, '..', '.env.local');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach((line) => {
    const [key, value] = line.split('=');
    if (key && value) {
      process.env[key] = value;
    }
  });
}

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error("‚ùå Variables d'environnement Supabase manquantes");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Donn√©es de test
const categories = [
  {
    name: 'Sport',
    slug: 'sport',
    description: 'Lunettes connect√©es pour les sportifs et athl√®tes',
    image_url: 'https://images.unsplash.com/photo-1508296695146-257a814070b4?w=600&h=600&fit=crop&crop=center',
    is_active: true,
  },
  {
    name: 'Lifestyle',
    slug: 'lifestyle',
    description: 'Lunettes √©l√©gantes pour le quotidien urbain',
    image_url: 'https://images.unsplash.com/photo-1574258495973-f010dfbb5371?w=600&h=600&fit=crop&crop=center',
    is_active: true,
  },
  {
    name: 'Prismatic',
    slug: 'prismatic',
    description: 'Technologie prismatique r√©volutionnaire',
    image_url: 'https://images.unsplash.com/photo-1473496169904-658ba7c44d8a?w=600&h=600&fit=crop&crop=center',
    is_active: true,
  },
];

const products = [
  {
    name: 'Sport Pro Max',
    slug: 'sport-pro-max',
    description:
      'Lunettes connect√©es pour sportifs, avec GPS et cardiofr√©quencem√®tre int√©gr√©s. Parfaites pour les athl√®tes exigeants.',
    short_description: 'GPS et cardiofr√©quencem√®tre int√©gr√©s',
    price: 39900, // en centimes
    sale_price: 29900,
    in_stock: true,
    stock_quantity: 15,
    is_active: true,
    features: ['GPS int√©gr√©', 'Monitoring cardiaque', "R√©sistant √† l'eau", 'Autonomie 8h'],
    tags: ['sport', 'gps', 'cardio', 'athl√®te'],
    specifications: {
      autonomie: '8 heures',
      gps: 'Int√©gr√©',
      r√©sistance: 'IPX7',
      poids: '45g',
    },
  },
  {
    name: 'Lifestyle Elite',
    slug: 'lifestyle-elite',
    description: 'Design √©l√©gant et assistant vocal int√©gr√© pour le quotidien. Style et technologie r√©unis.',
    short_description: 'Assistant vocal et design √©l√©gant',
    price: 29900,
    in_stock: true,
    stock_quantity: 8,
    is_active: true,
    features: ['Assistant vocal', 'Design √©l√©gant', 'Notifications intelligentes', 'Autonomie 12h'],
    tags: ['lifestyle', 'assistant', '√©l√©gant', 'urbain'],
    specifications: {
      assistant: 'Vocal int√©gr√©',
      design: '√âl√©gant',
      notifications: 'Intelligentes',
      autonomie: '12h',
    },
  },
  {
    name: 'Prismatic Vision',
    slug: 'prismatic-vision',
    description: 'R√©alit√© augment√©e immersive pour le travail et le divertissement.',
    short_description: 'R√©alit√© augment√©e immersive',
    price: 129900,
    in_stock: false,
    stock_quantity: 0,
    is_active: true,
    features: ['R√©alit√© augment√©e', 'Hologrammes', 'Navigation 3D', 'IA int√©gr√©e'],
    tags: ['ar', 'immersif', 'travail', 'innovation'],
    specifications: {
      ar: 'R√©alit√© augment√©e',
      hologrammes: 'Support√©s',
      navigation: '3D',
      ia: 'Int√©gr√©e',
    },
  },
  {
    name: 'Sport Lite',
    slug: 'sport-lite',
    description: 'Version l√©g√®re pour les activit√©s sportives occasionnelles. Parfait pour d√©buter.',
    short_description: 'Version l√©g√®re pour le sport',
    price: 19900,
    in_stock: true,
    stock_quantity: 25,
    is_active: true,
    features: ['L√©ger', 'Sport occasionnel', 'Prix abordable', 'Facile √† utiliser'],
    tags: ['sport', 'l√©ger', 'occasionnel', 'd√©butant'],
    specifications: {
      poids: 'L√©ger',
      usage: 'Occasionnel',
      prix: 'Abordable',
      difficult√©: 'Facile',
    },
  },
  {
    name: 'Urban Classic',
    slug: 'urban-classic',
    description: 'Style intemporel avec notifications intelligentes. Pour les citadins modernes.',
    short_description: 'Style intemporel et notifications',
    price: 14900,
    sale_price: 12000,
    in_stock: true,
    stock_quantity: 12,
    is_active: true,
    features: ['Style intemporel', 'Notifications', 'Classique', 'Urbain'],
    tags: ['urban', 'classic', 'notifications', 'moderne'],
    specifications: {
      style: 'Intemporel',
      notifications: 'Intelligentes',
      type: 'Classique',
      usage: 'Urbain',
    },
  },
  {
    name: 'Prismatic Euphoria',
    slug: 'prismatic-euphoria',
    description: 'Monture blanche avec verres bleus. √âdition limit√©e de la collection Prismatic.',
    short_description: 'Monture blanche, verres bleus',
    price: 38500,
    in_stock: true,
    stock_quantity: 5,
    is_active: true,
    features: ['√âdition limit√©e', 'Verres prismatiques', 'Design exclusif', 'Monture premium'],
    tags: ['prismatic', '√©dition limit√©e', 'premium', 'exclusif'],
    specifications: {
      √©dition: 'Limit√©e',
      verres: 'Prismatiques',
      design: 'Exclusif',
      monture: 'Premium',
    },
  },
];

async function seedDatabase() {
  console.log('üå± D√©but du seeding de la base de donn√©es...');

  try {
    // 1. V√©rifier et ins√©rer les cat√©gories si elles n'existent pas
    console.log('üìÅ V√©rification des cat√©gories...');
    const { data: existingCategories } = await supabase.from('categories').select('id, slug');

    const existingSlugs = existingCategories?.map((cat) => cat.slug) || [];
    const newCategories = categories.filter((cat) => !existingSlugs.includes(cat.slug));

    if (newCategories.length > 0) {
      const { data: categoriesData, error: categoriesError } = await supabase
        .from('categories')
        .insert(newCategories)
        .select();

      if (categoriesError) {
        console.error("‚ùå Erreur lors de l'insertion des cat√©gories:", categoriesError);
        return;
      }

      console.log(`‚úÖ ${categoriesData.length} nouvelles cat√©gories ins√©r√©es`);
    } else {
      console.log('‚úÖ Toutes les cat√©gories existent d√©j√†');
    }

    // 2. R√©cup√©rer les IDs des cat√©gories
    const { data: allCategories } = await supabase.from('categories').select('id, slug');

    const categoryMap = {};
    allCategories.forEach((cat) => {
      categoryMap[cat.slug] = cat.id;
    });

    // 3. V√©rifier et ins√©rer les produits
    console.log('üõçÔ∏è V√©rification des produits...');
    const { data: existingProducts } = await supabase.from('products').select('slug');

    const existingProductSlugs = existingProducts?.map((p) => p.slug) || [];
    const newProducts = products.filter((product) => !existingProductSlugs.includes(product.slug));

    if (newProducts.length > 0) {
      const productsWithCategories = newProducts.map((product) => {
        let categoryId = null;
        if (product.name.includes('Sport')) {
          categoryId = categoryMap['sport'];
        } else if (product.name.includes('Lifestyle') || product.name.includes('Urban')) {
          categoryId = categoryMap['lifestyle'];
        } else if (product.name.includes('Prismatic')) {
          categoryId = categoryMap['prismatic'];
        }

        return {
          ...product,
          category_id: categoryId,
        };
      });

      const { data: productsData, error: productsError } = await supabase
        .from('products')
        .insert(productsWithCategories)
        .select();

      if (productsError) {
        console.error("‚ùå Erreur lors de l'insertion des produits:", productsError);
        return;
      }

      console.log(`‚úÖ ${productsData.length} nouveaux produits ins√©r√©s`);
    } else {
      console.log('‚úÖ Tous les produits existent d√©j√†');
      const { data: allProducts } = await supabase.from('products').select('id, name');
      console.log(`üìä ${allProducts?.length || 0} produits existants dans la base`);
    }

    // 4. R√©cup√©rer tous les produits pour les images
    const { data: allProducts } = await supabase.from('products').select('id, name');

    if (allProducts && allProducts.length > 0) {
      console.log('üñºÔ∏è Insertion des images...');
      const imageInserts = [];

      allProducts.forEach((product) => {
        const imageUrl = product.name.includes('Sport')
          ? 'https://images.unsplash.com/photo-1508296695146-257a814070b4?w=600&h=600&fit=crop&crop=center'
          : product.name.includes('Lifestyle') || product.name.includes('Urban')
            ? 'https://images.unsplash.com/photo-1574258495973-f010dfbb5371?w=600&h=600&fit=crop&crop=center'
            : 'https://images.unsplash.com/photo-1473496169904-658ba7c44d8a?w=600&h=600&fit=crop&crop=center';

        imageInserts.push({
          product_id: product.id,
          image_url: imageUrl,
          alt_text: product.name,
          sort_order: 1,
        });
      });

      const { error: imagesError } = await supabase.from('product_images').insert(imageInserts);

      if (imagesError) {
        console.error("‚ùå Erreur lors de l'insertion des images:", imagesError);
        return;
      }

      console.log(`‚úÖ ${imageInserts.length} images ins√©r√©es`);
    }

    console.log('üéâ Seeding termin√© avec succ√®s !');
    console.log(`üìä R√©sum√©:`);
    console.log(`   - Cat√©gories: ${allCategories?.length || 0}`);
    console.log(`   - Produits: ${allProducts?.length || 0}`);
    console.log(`   - Images: ${allProducts?.length || 0}`);
  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error);
  }
}

// Ex√©cuter le seeding
seedDatabase();
