#!/usr/bin/env node

/**
 * Script de r√©paration d'urgence - Correction de la syntaxe cass√©e
 * Restaure les apostrophes et guillemets dans le code JavaScript/TypeScript
 */

const fs = require('fs');
const path = require('path');

console.log("üö® R√©paration d'Urgence - Syntaxe Cass√©e");
console.log('==========================================\n');

// Fonction pour corriger la syntaxe cass√©e
function fixBrokenSyntax() {
  console.log('üîß Correction de la syntaxe cass√©e...\n');

  const filesToFix = [
    'src/components/ChameleoCompactTestimonials.tsx',
    'src/components/ChameleoCommunity.tsx',
    'src/components/ChameleoComparison.tsx',
    'src/components/ChameleoHero.tsx',
    'src/components/ChameleoLensTechnologies.tsx',
    'src/components/ChameleoManufacturing.tsx',
    'src/components/ChameleoTechnologies.tsx',
    'src/components/ChameleoTestimonials.tsx',
    'src/app/checkout/page.tsx',
    'src/app/checkout/success/page.tsx',
    'src/app/product/[slug]/page.tsx',
    'src/app/product/aura/page.tsx',
    'src/app/product/falcon/page.tsx',
    'src/app/product/music-shield/page.tsx',
    'src/app/products/page.tsx',
    'src/app/test-advanced-quantity/page.tsx',
    'src/app/test-cart-management/page.tsx',
    'src/app/test-checkout-flow/page.tsx',
    'src/app/test-product-links/page.tsx',
    'src/app/test-products-integration/page.tsx',
    'src/app/test-quantity-selector/page.tsx',
    'src/app/test-supabase/page.tsx',
    'src/app/test-variations/page.tsx',
  ];

  let fixedCount = 0;

  for (const filePath of filesToFix) {
    try {
      if (!fs.existsSync(filePath)) {
        console.log(`‚ö†Ô∏è  Fichier non trouv√©: ${filePath}`);
        continue;
      }

      let content = fs.readFileSync(filePath, 'utf8');
      const originalContent = content;

      // Corriger les apostrophes dans le code JavaScript/TypeScript
      content = content.replace(/&apos;/g, "'");

      // Corriger les guillemets dans le code JavaScript/TypeScript
      content = content.replace(/&quot;/g, '"');

      if (content !== originalContent) {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ Syntaxe corrig√©e: ${filePath}`);
        fixedCount++;
      } else {
        console.log(`‚ÑπÔ∏è  Aucune correction n√©cessaire: ${filePath}`);
      }
    } catch (error) {
      console.error(`‚ùå Erreur avec ${filePath}:`, error.message);
    }
  }

  console.log(`\nüìä ${fixedCount} fichiers avec syntaxe corrig√©e\n`);
  return fixedCount;
}

// Fonction pour corriger sp√©cifiquement les erreurs de build
function fixBuildErrors() {
  console.log('üîß Correction des erreurs de build...\n');

  const criticalFiles = [
    'src/components/ChameleoCompactTestimonials.tsx',
    'src/components/ChameleoCommunity.tsx',
    'src/components/ChameleoComparison.tsx',
    'src/components/ChameleoHero.tsx',
    'src/components/ChameleoLensTechnologies.tsx',
    'src/components/ChameleoManufacturing.tsx',
    'src/components/ChameleoTechnologies.tsx',
    'src/components/ChameleoTestimonials.tsx',
  ];

  let fixedCount = 0;

  for (const filePath of criticalFiles) {
    try {
      if (!fs.existsSync(filePath)) {
        console.log(`‚ö†Ô∏è  Fichier non trouv√©: ${filePath}`);
        continue;
      }

      let content = fs.readFileSync(filePath, 'utf8');
      const originalContent = content;

      // Corriger les apostrophes dans les cha√Ænes de caract√®res JSX
      content = content.replace(/&apos;/g, "'");
      content = content.replace(/&quot;/g, '"');

      // Corriger les imports
      content = content.replace(/&apos;use client&apos;/g, "'use client'");
      content = content.replace(/&apos;@\/components\/ui\/badge&apos;/g, "'@/components/ui/badge'");
      content = content.replace(/&apos;@\/components\/ui\/button&apos;/g, "'@/components/ui/button'");
      content = content.replace(/&apos;@\/components\/ui\/card&apos;/g, "'@/components/ui/card'");
      content = content.replace(/&apos;lucide-react&apos;/g, "'lucide-react'");
      content = content.replace(/&apos;next\/link&apos;/g, "'next/link'");
      content = content.replace(/&apos;next\/image&apos;/g, "'next/image'");
      content = content.replace(/&apos;react&apos;/g, "'react'");

      if (content !== originalContent) {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ Build corrig√©: ${filePath}`);
        fixedCount++;
      }
    } catch (error) {
      console.error(`‚ùå Erreur avec ${filePath}:`, error.message);
    }
  }

  console.log(`\nüìä ${fixedCount} fichiers de build corrig√©s\n`);
  return fixedCount;
}

// Fonction principale
function main() {
  console.log("üöÄ D√©marrage de la r√©paration d'urgence...\n");

  let totalFixed = 0;

  // 1. Corriger la syntaxe cass√©e
  totalFixed += fixBrokenSyntax();

  // 2. Corriger les erreurs de build
  totalFixed += fixBuildErrors();

  console.log("üéâ R√©paration d'urgence termin√©e !");
  console.log(`üìä ${totalFixed} fichiers r√©par√©s`);

  console.log('\nüìã Prochaines √©tapes:');
  console.log('1. Tester: npm run build');
  console.log('2. V√©rifier que le build fonctionne');
  console.log('3. Relancer: npm run lint');
}

// Ex√©cuter le script
main();
